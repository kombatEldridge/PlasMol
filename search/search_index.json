{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PlasMol Documentation","text":"<p>PlasMol is a Python-based simulation framework for combining plasmonics (via Meep) with real-time time-dependent density functional theory (RT-TDDFT) simulations. It enables hybrid simulations of electromagnetic fields interacting with quantum molecular systems, useful for applications in plasmon-enhanced spectroscopy, nanophotonics, and quantum chemistry.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Simulation Modes: Pure Meep (electromagnetics), pure RT-TDDFT (quantum), or hybrid PlasMol.</li> <li>Quantum Components: Molecule handling with PySCF, electric field interactions, density matrix propagation (step, magnus2, rk4 methods), checkpointing, and HOMO-LUMO analysis.</li> <li>Meep Integration: Custom sources (continuous, Gaussian, chirped, pulse), symmetries, PML boundaries, and HDF5 output for visualizations.</li> <li>Utilities: CSV handling for fields, Fourier transforms for spectra, plotting (e.g., electric vs. polarization fields), GIF generation, and logging.</li> <li>Input Handling: CLI arguments, input file parsing (Meep and Quantum sections), parameter merging.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Install dependencies: <code>pip install pyscf meep numpy matplotlib pandas scipy</code>.</li> <li>Run a simulation: <code>python -m src.main -f path/to/input.in -v</code>.</li> </ol> <p>For more, see Installation and Usage.</p>"},{"location":"#project-structure","title":"Project Structure","text":"<ul> <li><code>src/</code>: Core codebase with modular directories (drivers/, quantum/, meep/, input/, utils/).</li> <li>Organized for scalability, with relative imports and package <code>__init__.py</code> files.</li> </ul> <p>[TODO: Add project logo or screenshot of a simulation output here.]</p>"},{"location":"about/","title":"About PlasMol","text":"<p>PlasMol is developed for simulating plasmon-molecule interactions, blending classical electromagnetics (Meep) with quantum RT-TDDFT (PySCF-based).</p>"},{"location":"about/#history","title":"History","text":"<ul> <li>Started as a flat codebase for hybrid simulations.</li> <li>Evolved to modular structure with packages for quantum, meep, drivers, etc.</li> <li>Key discussions: File organization, relative imports, packaging with <code>__init__.py</code>.</li> </ul>"},{"location":"about/#license","title":"License","text":"<p>MIT License [TODO: Confirm and link].</p>"},{"location":"about/#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Libraries: PySCF, Meep, NumPy.</li> <li>Contributors: [Your Name].</li> </ul> <p>[TODO: Add contact info, GitHub link, or funding details.]</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page documents key classes and functions. Based on codebase structure.</p>"},{"location":"api-reference/#quantum-module","title":"quantum/ Module","text":""},{"location":"api-reference/#moleculeparams","title":"<code>MOLECULE(params)</code>","text":"<ul> <li>Initializes molecule with PySCF, handles SCF, Fock matrix, dipole calculations.</li> <li>Methods: <code>get_F_orth()</code>, <code>calculate_mu()</code>, <code>get_homo_lumo_coefficient()</code>.</li> </ul>"},{"location":"api-reference/#electricfieldtimes-params","title":"<code>ELECTRICFIELD(times, params)</code>","text":"<ul> <li>Builds electric fields (pulse or kick shapes).</li> </ul>"},{"location":"api-reference/#propagators-quantumpropagators","title":"Propagators (quantum/propagators/)","text":"<ul> <li><code>step.propagate(params, molecule, exc)</code>: Step method.</li> <li><code>magnus2.propagate()</code>: Magnus2 with predictor-corrector.</li> <li><code>rk4.propagate()</code>: Runge-Kutta 4.</li> </ul>"},{"location":"api-reference/#meep-module","title":"meep Module","text":""},{"location":"api-reference/#simulationparams-moleculenone","title":"<code>Simulation(params, molecule=None)</code>","text":"<ul> <li>Runs Meep simulation, handles sources, PML, symmetries.</li> <li>Methods: <code>chirpx(t)</code>, <code>getElectricField(sim)</code>, <code>callBohr(sim, eField)</code>.</li> </ul>"},{"location":"api-reference/#sources","title":"Sources","text":"<ul> <li><code>ContinuousSource(...)</code>, <code>GaussianSource(...)</code>, etc.</li> </ul>"},{"location":"api-reference/#drivers","title":"Drivers","text":"<ul> <li><code>drivers.meep.run(params)</code>: Runs Meep simulation.</li> <li><code>drivers.rttddft.run(params)</code>: Runs RT-TDDFT, supports multi-threading for transforms.</li> <li><code>drivers.plasmol.run(params)</code>: Hybrid run.</li> </ul>"},{"location":"api-reference/#utils","title":"Utils","text":"<ul> <li><code>utils.csv.initCSV(filename, comment)</code>, <code>updateCSV(...)</code>.</li> <li><code>utils.plotting.show_eField_pField(eFieldFile, pFieldFile)</code>.</li> <li><code>utils.fourier.transform(...)</code>: Fourier transform and absorption spectrum.</li> </ul> <p>[TODO: Add full parameter lists, return types, or use Sphinx for auto-gen docs.]</p>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>Welcome contributors! Follow these steps to contribute.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ul> <li>Fork the repo.</li> <li>Install dev deps: <code>pip install black pre-commit pytest</code>.</li> <li>Run <code>pre-commit install</code> for hooks.</li> </ul>"},{"location":"contributing/#code-organization","title":"Code Organization","text":"<ul> <li><code>drivers/</code>: Simulation entry points (meep.py, etc.).</li> <li><code>quantum/</code>: Molecule, propagation, propagators/.</li> <li><code>meep/</code>: Simulation and sources.</li> <li><code>input/</code>: Parsing and params.</li> <li><code>utils/</code>: CSV, logging, plotting, etc.</li> <li>Use relative imports (e.g., <code>from ..quantum import MOLECULE</code>).</li> </ul>"},{"location":"contributing/#adding-features","title":"Adding Features","text":"<ul> <li>Create branch: <code>git checkout -b feature/new-prop</code>.</li> <li>Write tests in <code>tests/</code>.</li> <li>Update docs in <code>docs/</code>.</li> <li>Submit PR with changelog entry.</li> </ul>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":"<ul> <li>PEP 8 with Black formatter.</li> <li>Type hints and docstrings.</li> <li>Tests: <code>pytest</code>.</li> </ul> <p>[TODO: Add issue templates or specific guidelines.]</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>PlasMol requires Python 3.8+ and several scientific libraries. Follow these steps to set up the environment.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher.</li> <li>Git (for cloning the repository).</li> <li>Optional: Conda or virtualenv for isolated environments.</li> </ul>"},{"location":"installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/yourusername/PlasMol.git  # [TODO: Replace with actual repo URL]\ncd PlasMol\n</code></pre>"},{"location":"installation/#step-2-create-a-virtual-environment","title":"Step 2: Create a Virtual Environment","text":"<p>Using virtualenv: <pre><code>python -m venv env\nsource env/bin/activate  # On Windows: env\\Scripts\\activate\n</code></pre></p> <p>Or with Conda: <pre><code>conda create -n plasmol python=3.12\nconda activate plasmol\n</code></pre></p>"},{"location":"installation/#step-3-install-dependencies","title":"Step 3: Install Dependencies","text":"<p>PlasMol uses: - PySCF for quantum calculations. - Meep for electromagnetics. - NumPy, SciPy, Pandas, Matplotlib for data handling and plotting.</p> <p>Install via pip: <pre><code>pip install pyscf meep numpy scipy pandas matplotlib logging argparse\n# Optional for advanced features: torch (ML), biopython (if bio-related), etc.\n# [TODO: Add any other dependencies from your requirements.txt if available]\n</code></pre></p>"},{"location":"installation/#step-4-install-plasmol-as-a-package-optional","title":"Step 4: Install PlasMol as a Package (Optional)","text":"<p>To make it importable system-wide: <pre><code>pip install -e .\n</code></pre> This assumes a <code>setup.py</code> or <code>pyproject.toml</code> in the root (e.g., for editable install).</p>"},{"location":"installation/#step-5-verify-installation","title":"Step 5: Verify Installation","text":"<p>Run a test: <pre><code>python -m src.main --help\n</code></pre> If you see the CLI help message, it's working.</p>"},{"location":"installation/#common-issues","title":"Common Issues","text":"<ul> <li>Meep Installation: On some systems, Meep requires additional setup (e.g., <code>conda install -c conda-forge meep</code> for binaries).</li> <li>PySCF Errors: Ensure OpenBLAS or MKL is installed for performance.</li> <li>Import Errors: Run as a module (<code>python -m src.main</code>) from the project root to resolve relative imports.</li> </ul> <p>[TODO: Add platform-specific notes, e.g., for macOS/Linux/Windows.]</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>These tutorials demonstrate core workflows. Assume you've installed PlasMol.</p>"},{"location":"tutorials/#tutorial-1-simple-meep-simulation","title":"Tutorial 1: Simple Meep Simulation","text":"<ol> <li>Create <code>input.meep</code>:    ``` start meep simulation   cellLength = 10   resolution = 20   pmlThickness = 1.0 end source   sourceType = 'gaussian'   frequency = 0.5   [etc.] end <pre><code>2. Run:\n   ```bash\n   python -m src.main -f input.meep\n   ```\n3. View outputs: Check eField.csv and GIF.\n\nExpected: Simulates Gaussian pulse propagation.\n\n## Tutorial 2: RT-TDDFT Quantum Simulation\n1. Create `input.quantum`:\n   ```\nstart quantum\n  rttddft\n    basis = 'sto-3g'\n    xc = 'lda'\n    geometry\n      H 0 0 0.0 0.0\n      O 1.0 0.0 0.0\n    end geometry\n  end\n  propagator = 'rk4'\nend\nsource\n  shape = 'pulse'\n  wavelength_nm = 400\n  [etc.]\nend\n</code></pre></li> <li>Run**:    <code>bash   python -m src.main -f input.quantum -v</code></li> <li>Analyze: Use plotting.py to visualize fields; apply fourier.transform for spectrum.</li> </ol> <p>Expected: Propagates density matrix, outputs polarization and HOMO-LUMO jumps.</p>"},{"location":"tutorials/#tutorial-3-hybrid-plasmol","title":"Tutorial 3: Hybrid PlasMol","text":"<p>Combine Meep and quantum inputs. Run similarly.</p> <p>[TODO: Add more detailed examples, code snippets, or Jupyter notebook links.]</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>PlasMol is run via the command-line interface (CLI) from <code>src/main.py</code>. It supports three simulation types: Meep (electromagnetics), Quantum (RT-TDDFT), and PlasMol (hybrid).</p>"},{"location":"usage/#cli-arguments","title":"CLI Arguments","text":"<p><pre><code>python -m src.main -f &lt;input_file&gt; [options]\n</code></pre> - <code>-f, --input &lt;file&gt;</code>: Path to the input file (required). - <code>-l, --log &lt;file&gt;</code>: Log file name. - <code>-v, --verbose</code>: Increase verbosity (up to -vv<code>for debug). -</code>-r, --restart`: Restart simulation (deletes previous outputs).</p>"},{"location":"usage/#input-file-format","title":"Input File Format","text":"<p>Input files are divided into sections like <code>start meep</code> / <code>end meep</code>, <code>start quantum</code> / <code>end quantum</code>, and <code>start settings</code> / <code>end settings</code>. See examples in <code>templates/</code>.</p> <p>Example snippet: <pre><code>start settings\ndt = 0.01\nt_end = 100.0\neField_path = eField.csv\nend settings\n\nstart meep\n[simulation parameters like cellLength, resolution]\nend meep\n\nstart quantum\n[basis, xc, geometry, etc.]\nend quantum\n</code></pre></p>"},{"location":"usage/#running-simulations","title":"Running Simulations","text":"<ul> <li> <p>Pure Meep:   <pre><code>python -m src.main -f templates/template-meep.in -v\n</code></pre>   Outputs electric fields, HDF5 images, GIF (if enabled).</p> </li> <li> <p>Pure RT-TDDFT:   <pre><code>python -m src.main -f templates/template-quantum.in -v\n</code></pre>   polarization fields, spectra, checkpoints.</p> </li> <li> <p>Hybrid PlasMol:   <pre><code>python -m src.main -f templates/template-plasmol.in -vv\n</code></pre>   Combines both, with molecule-field interactions.</p> </li> </ul>"},{"location":"usage/#output-files","title":"Output Files","text":"<ul> <li>CSV: eField.csv, pField.csv for fields.</li> <li>Plots: output.png (eV_spectrum.png for spectra).</li> <li>Checkpoint: .npz for resuming.</li> <li>GIF: Simulation visualizations if HDF5 enabled.</li> </ul>"},{"location":"usage/#advanced-options","title":"Advanced Options","text":"<ul> <li>Propagators: Set in quantum input (step, magnus2, rk4).</li> <li>Sources: Continuous, Gaussian, chirped, pulse in meep section.</li> <li>Restart: Use <code>-r</code> to clear old files and resume from checkpoint.</li> </ul> <p>[TODO: Add example input files or screenshots of output.]</p>"}]}